210224 Vanilla JS - 크롬 앱 만들기 start

# JavaScript : 웹에 쓰이는 하나뿐인 언어
# Vanilla JS : 아무것도(library, framework) 없는 js, 브라우저를 통해 제공 


210302 Ch1-6 : Variable 변수

$console.log() : 실행
*변수를 생성해보자
Create -> Initialize -> Use
let a = 17; -> let b = a - 5; -> console.log(b);

210304 Ch1-7 : let, const, var

const : 상수, stable, 변하지 않음, 재선언 금지, 재할당 금지
let : 값 변경 허용, 재선언 금지, 재할당 가능
var : variable 값 변경 허용, 재선언 가능, 재할당 가능

* 변수 첫 사용은 const로 하자
* "..." 는 text 취급, string
* bool -> true/false : text 아님
* float : 소숫점

## Organizing Data by Array & Object

# Array : 여러 데이터를 하나로 묶어서 저장 list 

* 이름 지정할 때 소문자대문자 섞어 씀 'camel case'
ex) const daysOfWeek = ["Mon", "Wed"];
-> console.log(daysOfWeek[1]);


# Object : 각 value에 이름 지정 가능
: 실제 객체를 만들어서 label을 저장하고 싶은 data에 줄 수 있다
const meiInfo = {
	name : "Mei",
	age : 24,
	gender : "Female",
	isHandsome : true
}
-> console.log(meiInfo.gender); 

* Object를 Array 안에 넣기 가능!
favAnimals : ["Cat", "Puppy"]

* Object 의 Array 생성 가능!
favFood : [{name : "Bob", fatty : false }]

** log는 object이자 function

* 인자 (Argument)/파라미터
: 함수는 인자를 받음. 유사 변수
-> 인자를 받도록 함수를 준비하자
-> function sayHello(potato) { 
	console.log('Hello', potato);
}
-> 인자를 무한히 받을 수 있다


210307 Ch2-1 : More Function Fun

더 멋지게 사용해보자
`` : 백틱
console.log(`Hello ${name} you are ${age} years old`);
-> 변수를 ${ }로 설정

console.log 대신에 return 으로 반환가능



210308 Ch2-2 : JS DOM Functions


JS를 HTML과 같이 써보자
*JS에서 id 선택하기 -> document.

*DOM : Document Object Module
: JS는 HTML에 있는 모든 요소들을 가져오고 object로 바꿔줌
** innerHTML


210312 Ch2-3 : Modifying the DOM with JS

console.log 대신에 다른 걸 써보자
console.dir -> js 객체 표기법이 나옴

수정해보자
title.style.color = 'red'; -> html 을 js로 조작 가능

document.title = "I own you"; -> 문서 이름 수정 가능

const title = document.querySelector("title");
# querySelector : 노드의 첫번째 자식을  	반환return
-> #title : id를 선택하겠다
-> /title : class를 선택하겠다


210317 Ch2-4 : Events and event handlers

JS : Event에 반응하기 위한 것 (단순 html, css 변형용이 아님)
Event : 웹사이트에서 발생하는 것들 click, resize, submit...
-> "Listen to Event" : JS가 event 받기를 기다리는 것

window에 event Listener을 추가하기 위해 이벤트에서 다를 함수를 작성하자

* 함수 vs 함수()
() 없으면 원하는 시간에 호출, -> resize할 때 호출 62420 // 65930 //// 63634
() 있으면 지금 바로 호출 -> resize 안해도 자동 호출


210318 Ch2-5 : If, else, and, or

if - else if - else문
* === : 값을 할당하지 않는다. just 비교

and / or 문

*prompt : 유저에게 무언가를 물어봄


**const를 써보자

** 솔직히 JS에서는 logic만 처리하는게 깔끔 


>>>> 드디어 실전!!!!! <<<<

210322 Ch3-0 : Making a JS Clock part 1


모멘텀 Momentum - 생산성 앱

clock.js 파일 따로 만들어서 작업

먼저 init 함수 생성
다음에 body 태그 내에 div 태그로 class 작성

const로 설정

다음에 현재 시각을 가져오는 함수 생성

객체 안에 text 넣으면 시간 나타남
clockTitle.innerText = `${hours}:${minutes}:${seconds}`;
하지만 아직 새로고침을 해야함 ㅇㅇ 실시간 반영이 아니다 ㅠㅠ


210323 Ch3-1 : Making a JS Clock part 2

시간 실시간 반영 함수를 알아보자
setInterval : 두 인자 (Argument) 값을 받음 
-> 첫번째 인자 - 실행할 함수를 받음 -> 그리고 그 함수를 실행하고 싶은 시간 체크
-> 두번째 인자 - 실행할 시간 간격

[예시]
setInterval(sayHi, 1000) //시간 간격 1000ms = 1초


이제 0, 1, 2 -> 00 01 02...초로 바꿔보자
-> 유사 if문으로 적용 : "temary operator" 삼항연산자
-> 하나의 문자열 string으로 가능

-> 숫자가 10보다 작으면 앞에 0 넣기 조건 on
${seconds < 10 ? `0${seconds}` : seconds}
// if~else 구문


210325 Ch3-2 : Saving the User Name part 1

사람의 정보를 컴퓨터에 저장해보자
gretting.js 생성

Local Storage
: 작은 정보(12시간법,  참거짓 등)를 user 컴퓨터에 저장

local storage에서 user 유무에 따라 case 나눠보자

case 1) 현재 user가 null 아닐 때 색깔을 표시하는 함수를 추가로 만들자
-> 색칠할 때 form을 숨기자 -> remove 추가

case 2) 현재 user가 null일 때 user의 이름을 요청하는 함수를 만들자
-> 뭔가를 form에 submit하면 handle 할 거임
-> submit을 handle할 함수를 만들자

* event의 preventDefault
: event는 거품처럼 하나가 실행되면 다른 모든 것들이 event에 반응함
-> 이 기본 동작 default를 막고 싶다
-> 막으면 입력칸 enter쳐도 안 날라감


parameter의 현재 value가 필요 -> check

이제 새로고침해도 내 이름 기억하도록 하자
이름을 저장하는 함수를 만들자


210327 Ch3-4 : Making a To Do List part 1

greeting.js랑 비슷. hiding & showing 기능만 없을뿐

그리고 form과 class 작성 + list 까지

다음으로 js 파일에서 const(상수)를 선언할 때 다른 파일과 이름이 겹침
-> js 모듈들을 분리시키도록 이름을 바꿔주자

다음에는 local storage에서 정보를 가져옴 - loadToDos()

const로 상수 만들기 - TODOS_LS

toDos가 null 일 때 할 일이 없음
-> 아닐 때를 생각해보자

toDo를 생성하는 함수 toDoForm에서
addEventListener로 event를 추가하고,
submit이라는 event를 handle 하기 위해서
handleSubmit이라는 함수를 만들자

그리고 paintToDo 함수를 만들자
enter누르면 입력창에 내가 쓴 내용 사라지도록 하자

ToDo 생성 -> HTML에서 li로 틀을 만들어주자
숫자 타입 id를 주자

지금까지 한 것은 querySelector로
HTML에서 필요한 것들을 얻음

이제 span과 delBtn을 li 안에 넣자(append)
toDoList.appendChild(li);
마지막으로 li를 ul에 넣자(append)

결론적으로 element를 생성하고 ul안에 넣고 싶은 곳에 넣음


이제 본격적으로 화면 위에 띄워보자

먼저 ToDo 저장하자 - Array 형식으로 (시작은 empty)
이를 채우기 위해 toDoObj를 만들자
그 후 push로 element 넣어준다
결론은 'toDos' Array 안에 toDoObj를 넣는다

newId로 깔끔하게 id 부여해주고
li에도 newId에 이어서 id 할당해줌

다음에는 Local Storage에도 ToDo를 저장해주자
toDos를 가져와서 local에 저장하는 함수를 만들자 - saveToDos
그리고 paintToDo에서 push다음에 함수 호출하자

F12 - Application - Local Storage 확인하면 'Object'이라고 써있음
: Local Storage에서는 JS의 data를 저장할 수 없기 때문 string만 가능
-> JS는 Local Storage에 있는 모든 데이터를 string으로 저장하려고 한다

-> 우리는 object가 string이 되도록 만들자 by JSON.stringify
(JSON : JS Object Notation, data 전달할 때 JS가 다루도록 object로 바꿔주는 기능)
저장 완료!

이제는 toDos를 불러오자
console.log(loadedToDos) -> string임
-> JSON으로 변환 const parsedToDos = JSON.parse(loadedToDos);

이제 Local Storage에서 불러온 parsedToDos를 화면에 paint(보여주기) - 우리 목표
지금은 ToDos가 empty -> 모든 ToDo 항목에 paintToDo하자

*forEach : Array에 담겨있는 것들 각각에 한번씩 함수를 실행시켜줌



